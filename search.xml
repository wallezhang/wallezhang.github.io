<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用Docker部署MongoDB集群]]></title>
    <url>%2F2017%2F08%2F17%2Fhow-to-deploy-mongodb-cluster-with-docker%2F</url>
    <content type="text"><![CDATA[使用Docker部署MongoDB Cluster环境准备 四台服务器，分别命名为ServerA、ServerB、ServerC、ServerD 2 Shard（1 Primary 1 Secondary 1 Arbiter） Nodes 3 Config Nodes 4 Router Nodes Docker版本：1.12.5 Docker Compose版本：1.9.0 Docker镜像MongoDB官方镜像 docker-compose.ymlServerA配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647version: '2'services: configsrv: image: mongo command: mongod --keyFile /data/configdb/mongodb-keyfile --oplogSize 1024 --replSet configrs --port 27017 --configsvr --wiredTigerCacheSizeGB 5 volumes: - /data/configsrv_db:/data/configdb ports: - "27018:27017" restart: always container_name: configsrv ulimits: nofile: soft: 300000 hard: 300000 rs1_node: image: mongo command: mongod --keyFile /data/db/mongodb-keyfile --oplogSize 10240 --replSet rs1 --directoryperdb --port 27017 --shardsvr volumes: - /data/rs1_node_db:/data/db ports: - "27019:27017" restart: always container_name: rs1_node ulimits: nofile: soft: 300000 hard: 300000 router: image: mongo command: mongos --keyFile /data/db/mongodb-keyfile --configdb configrs/ServerA:27018,ServerB:27018,ServerC:27018 ports: - "27017:27017" volumes: - /data/router_db:/data/db restart: always container_name: router ulimits: nofile: soft: 300000 hard: 300000 ServerB配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162version: '2'services: configsrv: image: mongo command: mongod --keyFile /data/configdb/mongodb-keyfile --oplogSize 1024 --replSet configrs --port 27017 --configsvr --wiredTigerCacheSizeGB 5 volumes: - /data/configsrv_db:/data/configdb ports: - "27018:27017" restart: always container_name: configsrv ulimits: nofile: soft: 300000 hard: 300000 rs1_node: image: mongo command: mongod --keyFile /data/db/mongodb-keyfile --oplogSize 10240 --replSet rs1 --directoryperdb --port 27017 --shardsvr volumes: - /data/rs1_node_db:/data/db ports: - "27019:27017" restart: always container_name: rs1_node ulimits: nofile: soft: 300000 hard: 300000 rs2_arbiter: image: mongo command: mongod --keyFile /data/db/mongodb-keyfile --oplogSize 1024 --replSet rs2 --directoryperdb --port 27017 --shardsvr --wiredTigerCacheSizeGB 1 --nojournal --smallfiles volumes: - /data/rs2_arbiter_db:/data/db ports: - "27020:27017" restart: always container_name: rs2_arbiter ulimits: nofile: soft: 300000 hard: 300000 router: image: mongo command: mongos --keyFile /data/db/mongodb-keyfile --configdb configrs/ServerA:27018,ServerB:27018,ServerC:27018 ports: - "27017:27017" volumes: - /data/router_db:/data/db restart: always container_name: router ulimits: nofile: soft: 300000 hard: 300000 ServerC配置文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162version: '2'services: configsrv: image: mongo command: mongod --keyFile /data/configdb/mongodb-keyfile --oplogSize 1024 --replSet configrs --port 27017 --configsvr --wiredTigerCacheSizeGB 5 volumes: - /data/configsrv_db:/data/configdb ports: - "27018:27017" restart: always container_name: configsrv ulimits: nofile: soft: 300000 hard: 300000 rs2_node: image: mongo command: mongod --keyFile /data/db/mongodb-keyfile --oplogSize 10240 --replSet rs2 --directoryperdb --port 27017 --shardsvr volumes: - /data/rs2_node_db:/data/db ports: - "27019:27017" restart: always container_name: rs2_node ulimits: nofile: soft: 300000 hard: 300000 rs1_arbiter: image: mongo command: mongod --keyFile /data/db/mongodb-keyfile --oplogSize 1024 --replSet rs1 --directoryperdb --port 27017 --shardsvr --wiredTigerCacheSizeGB 1 --nojournal --smallfiles volumes: - /data/rs1_arbiter_db:/data/db ports: - "27020:27017" restart: always container_name: rs1_arbiter ulimits: nofile: soft: 300000 hard: 300000 router: image: mongo command: mongos --keyFile /data/db/mongodb-keyfile --configdb configrs/ServerA:27018,ServerB:27018,ServerC:27018 ports: - "27017:27017" volumes: - /data/router_db:/data/db restart: always container_name: router ulimits: nofile: soft: 300000 hard: 300000 ServerD配置文件 1234567891011121314151617181920212223242526272829303132version: '2'services: rs2_node: image: mongo command: mongod --keyFile /data/db/mongodb-keyfile --oplogSize 10240 --replSet rs2 --directoryperdb --port 27017 --shardsvr volumes: - /data/rs2_node_db:/data/db ports: - "27019:27017" restart: always container_name: rs2_node ulimits: nofile: soft: 300000 hard: 300000 router: image: mongo command: mongos --keyFile /data/db/mongodb-keyfile --configdb configrs/ServerA:27018,ServerB:27018,ServerC:27018 ports: - "27017:27017" volumes: - /data/router_db:/data/db restart: always container_name: router ulimits: nofile: soft: 300000 hard: 300000 启动前准备工作 创建mongodb-keyfile文件 12openssl rand -base64 741 &gt; mongodb-keyfilechmod 600 mongodb-keyfile 创建宿主机的volume文件夹 初始化Config节点重要：在初始化启动前需要去掉docker-compose.yml配置文件中的--keyFile参数 启动节点在ServerA、ServerB和ServerC三台服务器上运行命令：docker-compose up -d configsrv 初始化利用mongo连接到ServerA节点，输入以下命令创建管理用户： 12345use admindb.createUser(&#123;user: "mongoUserAdmin", pwd: "123456", roles: [ &#123; role: "userAdminAnyDatabase", db: "admin" &#125; ] &#125;)db.createUser(&#123;user: "mongoRootAdmin", pwd: "123456", roles: [ &#123; role: "root", db: "admin" &#125; ] &#125;) 初始化ReplicaSet信息 1234567891011rs.initiate( &#123; _id: "configrs", configsvr: true, members: [ &#123; _id : 0, host : "ServerA:27018" &#125;, &#123; _id : 1, host : "ServerB:27018" &#125;, &#123; _id : 2, host : "ServerC:27018" &#125; ] &#125;) 初始化Shard1节点重要：在初始化启动前需要去掉docker-compose.yml配置文件中的--keyFile参数 启动节点在ServerA和ServerB两台服务器上运行命令：docker-compose up -d rs1_node 在ServerC服务器上运行命令：docker-compose up -d rs1_arbiter 初始化利用mongo连接到ServerA节点，创建管理用户 12345use admindb.createUser(&#123;user: "mongoUserAdmin", pwd: "123456", roles: [ &#123; role: "userAdminAnyDatabase", db: "admin" &#125; ] &#125;)db.createUser(&#123;user: "mongoRootAdmin", pwd: "123456", roles: [ &#123; role: "root", db: "admin" &#125; ] &#125;) 初始化ReplicaSet信息 123456789rs.initiate( &#123; _id : "rs1", members: [ &#123; _id : 0, host : "ServerA:27019" &#125;, &#123; _id : 1, host : "ServerB:27019" &#125; ] &#125;) 增加Arbiter节点 1rs.addArb("ServerC:27020") 查看rs状态：rs.status() 初始化Shard2节点与Shard1节点雷同，只需要修改对应的服务器IP 重启Config和Shard节点取消--keyFile参数的注释，删掉上述创建的所有container 利用docker-compose再次启动上面所有节点 启动Router节点使用命令docker-compose up -d router在四台服务器上启动路由节点 配置Cluster增加Shard节点使用mongo连接到任意一台服务器的router节点，然后执行以下命令将Shard节点加入到当前Cluster中 1234use admindb.auth("&lt;username&gt;","&lt;password&gt;")sh.addShard("rs1/ServerA:27019")sh.addShard("rs2/ServerD:27019") 启动Sharding在对collection进行sharding之前一定要先对数据库启动sharding 12sh.enableSharding("&lt;database&gt;")sh.shardCollection( "&lt;database&gt;.&lt;collection&gt;", &#123; _id : "hashed" &#125; ) 参考资料 官方资料：Deploy a Sharded ClusterHashed Sharding]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
